Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> MINUS expression
Rule 6     expression -> LPAREN expression RPAREN
Rule 7     expression -> NUMBER
Rule 8     expression -> VARIABLE
Rule 9     expression -> ATTR

Terminals, with rules where they appear

ATTR                 : 9
DIVIDE               : 4
LPAREN               : 6
MINUS                : 2 5
NUMBER               : 7
PLUS                 : 1
RPAREN               : 6
TIMES                : 3
VARIABLE             : 8
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 4

state 1

    (7) expression -> NUMBER .

    RPAREN          reduce using rule 7 (expression -> NUMBER .)
    PLUS            reduce using rule 7 (expression -> NUMBER .)
    MINUS           reduce using rule 7 (expression -> NUMBER .)
    TIMES           reduce using rule 7 (expression -> NUMBER .)
    DIVIDE          reduce using rule 7 (expression -> NUMBER .)
    $end            reduce using rule 7 (expression -> NUMBER .)


state 2

    (6) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 7

state 3

    (8) expression -> VARIABLE .

    RPAREN          reduce using rule 8 (expression -> VARIABLE .)
    PLUS            reduce using rule 8 (expression -> VARIABLE .)
    MINUS           reduce using rule 8 (expression -> VARIABLE .)
    TIMES           reduce using rule 8 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 8 (expression -> VARIABLE .)
    $end            reduce using rule 8 (expression -> VARIABLE .)


state 4

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 8
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 9


state 5

    (5) expression -> MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 12

state 6

    (9) expression -> ATTR .

    RPAREN          reduce using rule 9 (expression -> ATTR .)
    PLUS            reduce using rule 9 (expression -> ATTR .)
    MINUS           reduce using rule 9 (expression -> ATTR .)
    TIMES           reduce using rule 9 (expression -> ATTR .)
    DIVIDE          reduce using rule 9 (expression -> ATTR .)
    $end            reduce using rule 9 (expression -> ATTR .)


state 7

    (6) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 13
    PLUS            shift and go to state 8
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 9


state 8

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 14

state 9

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 15

state 10

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 16

state 11

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . MINUS expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NUMBER
    (8) expression -> . VARIABLE
    (9) expression -> . ATTR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 1
    VARIABLE        shift and go to state 3
    ATTR            shift and go to state 6

    expression                     shift and go to state 17

state 12

    (5) expression -> MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 5 (expression -> MINUS expression .)
    PLUS            reduce using rule 5 (expression -> MINUS expression .)
    MINUS           reduce using rule 5 (expression -> MINUS expression .)
    TIMES           reduce using rule 5 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 5 (expression -> MINUS expression .)
    $end            reduce using rule 5 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 13

    (6) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 6 (expression -> LPAREN expression RPAREN .)


state 14

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 9

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 10 ]


state 15

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 16

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 9

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 10 ]


state 17

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 9 ]

